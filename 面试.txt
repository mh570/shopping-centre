2023/重新开始,jvm
[堆，方法区（元空间] 本地方法栈，栈，程序计算器

栈
局部变量表：是用来存储我们临时8个基本数据类型、对象引用地址、returnAddress类型。（returnAddress中保存的是return后要执行的字节码的指令地址。）
操作数栈：操作数栈就是用来操作的，例如代码中有个 i = 6*6，他在一开始的时候就会进行操作，读取我们的代码，进行计算后再放入局部变量表中去
动态链接：假如我方法中，有个 service.add()方法，要链接到别的方法中去，这就是动态链接，存储链接的地方。
出口：出口是什呢，出口正常的话就是return 不正常的话就是抛出异常落


开始，方法区的oom到  2级分区{
    Throwable的 error 和 Exption  || 编译时异常 和 运行时异常
    error 的 oom 内存溢出到内存泄露
}




8前后 ThreadLocal有问题    ThreadLocal 使用完后，key的引用就会为null      get()/set()方法时，当判断key为null时会将value置为null
hreadLocal类定义了expungeStaleEntry方法用于清理key为null的value
ThreadLocalMap使用线性探测法来解决哈希冲突的
                 ^
                 |
                 |
4大引用
强 null时回收
软 JVM 认为内存不足时
弱 只能存活到下一次GC前
虚 随时会被回收， 创建了可能很快就会被回收 跟踪JVM的垃圾回收活动 finalize
引用队列 GC通知程序某个对象不可达的信号，装载这个不可达对象引用的容器

1:强引用是只有当GC明确判断该引用无效的时候才会回收相应的引用对象，即使抛出OOME警告。
2:软引用是当GC检测到继续创建对象会导致OOME的时候会进行一次垃圾回收，这次回收会讲软引用回收以防抛出异常，根据这样的特点该引用常用来被当作缓存使用。
3:弱引用是哪些如果引用未被使用，就会在最近的一次GC的时候被回收。例如Java的TheardLocal与动态代理都是基于这样的一个引用实现的，一般针对那些比较敏感的数据。
4:虚引用是针对那些已经执行完析构函数之后，仍然需要在执行一些其它操作的对象：比如资源对象的关闭就可以用到这个引用。
                ||
                ||
                ||
GC Roots
finalize
三色标记-->G1  写屏障 + SATB 删除的时候记录所有的对象
                ||
                ||
                ||
GC


















2023/3/19
力扣
mysql
#1、截取函数：SUBSTRING(str,begin,end)
#2、拼接函数：CONCAT(str1,str2)                     GROUP_CONCAT拼接函数+","分开
#3、大小写转换：UPPER(str)/LOWER(str)
#4、LENGTH函数用于返回字符串的数量,注意不适合中文，abcd这4个数量
#5、count统计数量
#6、distinct去重复
#group by 分组，没用过忘了这玩意
#3-7连接 SEPARATOR连接的时候 SEPARATOR "+"
#8 IS NULL 和 IS NOT NULL 空和非空
#9   左右连接来通过  union 完成全表连接   union all     一个是包括重复，一个不是   a a  1就a 2是 a a
#10 in 是什么，可能有很多，是什么或者是什么 or





binlog (主从同步 ) redo log (持久日志) undo log(回滚日志)
ACID
原子 undo log(回滚日志)，错误回滚，保证原子
一致，其他3大特性保证，业务数据一致
持久，redo log (持久日志)，数据在日志上就不会消失
隔离，mvcc

mvcc
当前读
快照读

Read View
下隔离级别
RC,RR不一样

    ^
    |
    |
redis
读写一致



















